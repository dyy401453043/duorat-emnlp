[
    {
        "index": 5,
        "hardness": "medium",
        "pred": "SELECT Avg(singer.Age), Min(singer.Age), Max(singer.Age) FROM singer WHERE singer.Age = \" m \"",
        "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "db_id": "concert_singer",
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "reason": "lack of value-link, ‘French’ in question and ’France‘ in database"
    },
    {
        "index": 16,
        "hardness": "medium",
        "pred": "SELECT Max(stadium.Capacity), Avg(stadium.Average) FROM stadium",
        "gold": "select max(capacity), average from stadium",
        "db_id": "concert_singer",
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "reason": "misunderstand the 'average' in question and 'average' in column"
    },
    {
        "index": 17,
        "hardness": "medium",
        "pred": "SELECT Avg(stadium.Average), Max(stadium.Capacity) FROM stadium",
        "gold": "select avg(capacity) ,  max(capacity) from stadium",
        "db_id": "concert_singer",
        "question": "What is the average and maximum capacities for all stadiums ?",
        "reason": "misunderstand the 'average' in question and 'average' in column"
    },
    {
        "index": 18,
        "hardness": "medium",
        "pred": "SELECT stadium.Name, stadium.Capacity FROM stadium GROUP BY stadium.Highest ORDER BY Avg(stadium.Average) Desc LIMIT 1",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "reason": "misunderstand the 'highest' in question and 'highest' in column"
    },
    {
        "index": 19,
        "hardness": "medium",
        "pred": "SELECT stadium.Name, stadium.Capacity FROM stadium GROUP BY stadium.Highest ORDER BY Avg(stadium.Average) Desc LIMIT 1",
        "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "db_id": "concert_singer",
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "reason": "misunderstand the 'highest' in question and 'highest' in column"
    },
    {
        "index": 23,
        "hardness": "medium",
        "pred": "SELECT concert.Stadium_ID, Count(*) FROM concert GROUP BY concert.Stadium_ID",
        "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "db_id": "concert_singer",
        "question": "For each stadium, how many concerts play there?",
        "reason": "a little slack off"
    },
    {
        "index": 36,
        "hardness": "medium",
        "pred": "SELECT singer.Name, Count(*) FROM singer_in_concert JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID GROUP BY singer.Name",
        "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "db_id": "concert_singer",
        "question": "What are the names of the singers and number of concerts for each person?"
    },
    {
        "index": 43,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM stadium ORDER BY stadium.Capacity Desc LIMIT 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer",
        "question": "Find the number of concerts happened in the stadium with the highest capacity ."
    },
    {
        "index": 44,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID ORDER BY stadium.Capacity Desc LIMIT 1",
        "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
        "db_id": "concert_singer",
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?"
    },
    {
        "index": 47,
        "hardness": "medium",
        "pred": "SELECT Pets.weight FROM Pets WHERE Pets.PetType = (SELECT Min(Pets.PetType) FROM Pets)",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "question": "Find the weight of the youngest dog."
    },
    {
        "index": 48,
        "hardness": "medium",
        "pred": "SELECT Min(Pets.weight) FROM Pets",
        "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "question": "How much does the youngest dog weigh?"
    },
    {
        "index": 50,
        "hardness": "medium",
        "pred": "SELECT Max(Pets.weight), Max(Pets.weight), Pets.PetType FROM Pets GROUP BY Pets.PetType",
        "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "db_id": "pets_1",
        "question": "List the maximum weight and type for each type of pet."
    },
    {
        "index": 51,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20",
        "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "db_id": "pets_1",
        "question": "Find number of pets owned by students who are older than 20."
    },
    {
        "index": 61,
        "hardness": "extra",
        "pred": "SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \" cat \")",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "db_id": "pets_1",
        "question": "Find the major and age of students who do not have a cat pet."
    },
    {
        "index": 62,
        "hardness": "extra",
        "pred": "SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \" cat \")",
        "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "db_id": "pets_1",
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?"
    },
    {
        "index": 63,
        "hardness": "hard",
        "pred": "SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet WHERE Pets.PetType = \" cat \"",
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "db_id": "pets_1",
        "question": "Find the id of students who do not have a cat pet."
    },
    {
        "index": 64,
        "hardness": "hard",
        "pred": "SELECT Student.StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet WHERE Pets.PetType = \" cat \"",
        "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
        "db_id": "pets_1",
        "question": "What are the ids of the students who do not own cats as pets?"
    },
    {
        "index": 65,
        "hardness": "extra",
        "pred": "SELECT Student.Fname, Student.Age FROM Student WHERE Student.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \" dog \" EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \" cat \")",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet."
    },
    {
        "index": 66,
        "hardness": "extra",
        "pred": "SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \" dog \" EXCEPT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = \" cat \"",
        "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
        "db_id": "pets_1",
        "question": "What is the first name of every student who has a dog but does not have a cat?"
    },
    {
        "index": 67,
        "hardness": "medium",
        "pred": "SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT Min(Pets.pet_age) FROM Pets)",
        "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "db_id": "pets_1",
        "question": "Find the type and weight of the youngest pet."
    },
    {
        "index": 72,
        "hardness": "medium",
        "pred": "SELECT Pets.PetType, Max(Pets.pet_age), Pets.PetType FROM Pets GROUP BY Pets.PetType",
        "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "db_id": "pets_1",
        "question": "What is the average and maximum age for each pet type?"
    },
    {
        "index": 75,
        "hardness": "medium",
        "pred": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.StuID IN (SELECT Has_Pet.StuID FROM Has_Pet)",
        "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "db_id": "pets_1",
        "question": "Find the first name and age of students who have a pet."
    },
    {
        "index": 79,
        "hardness": "medium",
        "pred": "SELECT Count(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID",
        "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "db_id": "pets_1",
        "question": "Find the number of pets for each student who has any pet and student id."
    },
    {
        "index": 80,
        "hardness": "medium",
        "pred": "SELECT Count(*), Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID",
        "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "db_id": "pets_1",
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names ."
    },
    {
        "index": 83,
        "hardness": "hard",
        "pred": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "db_id": "pets_1",
        "question": "Find the last name of the student who has a cat that is age 3."
    },
    {
        "index": 84,
        "hardness": "hard",
        "pred": "SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.Age = 3 AND Student.Age = \" cat \"",
        "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "db_id": "pets_1",
        "question": "What is the last name of the student who has a cat that is 3 years old?"
    },
    {
        "index": 90,
        "hardness": "medium",
        "pred": "SELECT continents.Continent, continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent",
        "gold": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "db_id": "car_1",
        "question": "For each continent, list its id, name, and how many countries it has?"
    },
    {
        "index": 93,
        "hardness": "medium",
        "pred": "SELECT car_makers.Maker, car_makers.FullName, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "db_id": "car_1",
        "question": "How many models does each car maker produce? List maker full name, id and the number."
    },
    {
        "index": 94,
        "hardness": "medium",
        "pred": "SELECT car_makers.Maker, car_makers.FullName, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id",
        "gold": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "db_id": "car_1",
        "question": "What is the full name of each car maker, along with its id and how many models it produces?"
    },
    {
        "index": 95,
        "hardness": "hard",
        "pred": "SELECT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY cars_data.Horsepower Asc LIMIT 1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "db_id": "car_1",
        "question": "Which model of the car has the minimum horsepower?"
    },
    {
        "index": 97,
        "hardness": "extra",
        "pred": "SELECT model_list.Model FROM model_list WHERE cars_data.Weight < (SELECT Avg(cars_data.Weight) FROM cars_data)",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "db_id": "car_1",
        "question": "Find the model of the car whose weight is below the average weight."
    },
    {
        "index": 98,
        "hardness": "extra",
        "pred": "SELECT model_list.Model FROM cars_data WHERE cars_data.Weight < (SELECT Avg(cars_data.Weight) FROM cars_data)",
        "gold": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
        "db_id": "car_1",
        "question": "What is the model for the car with a weight smaller than the average?"
    },
    {
        "index": 99,
        "hardness": "extra",
        "pred": "SELECT car_makers.Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = 1970",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "db_id": "car_1",
        "question": "Find the name of the makers that produced some cars in the year of 1970?"
    },
    {
        "index": 100,
        "hardness": "extra",
        "pred": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year = 1970",
        "gold": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "db_id": "car_1",
        "question": "What is the name of the different car makers who produced a car in 1970?"
    },
    {
        "index": 101,
        "hardness": "extra",
        "pred": "SELECT car_names.Make, car_names.MakeId FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year Asc LIMIT 1",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "db_id": "car_1",
        "question": "Find the make and production time of the cars that were produced in the earliest year?"
    },
    {
        "index": 102,
        "hardness": "extra",
        "pred": "SELECT car_makers.Maker, cars_data.Year FROM car_makers ORDER BY cars_data.Year Asc LIMIT 1",
        "gold": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
        "db_id": "car_1",
        "question": "What is the maker of the carr produced in the earliest year and what year was it?"
    },
    {
        "index": 103,
        "hardness": "hard",
        "pred": "SELECT DISTINCT model_list.Model FROM model_list WHERE cars_data.Year > 1980",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "db_id": "car_1",
        "question": "Which distinct car models are the produced after 1980?"
    },
    {
        "index": 104,
        "hardness": "hard",
        "pred": "SELECT DISTINCT model_list.Model FROM model_list WHERE model_list.ModelId > 1980",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "db_id": "car_1",
        "question": "What are the different models for the cards produced after 1980?"
    },
    {
        "index": 105,
        "hardness": "hard",
        "pred": "SELECT continents.Continent, Count(*) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent",
        "gold": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "db_id": "car_1",
        "question": "How many car makers are there in each continents? List the continent name and the count."
    },
    {
        "index": 109,
        "hardness": "medium",
        "pred": "SELECT car_makers.Maker, car_makers.FullName, Count(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker",
        "gold": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "db_id": "car_1",
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name ."
    },
    {
        "index": 111,
        "hardness": "medium",
        "pred": "SELECT cars_data.Accelerate FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = \" amc hornet sportabout \" AND car_makers.Maker = \" sw \"",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?"
    },
    {
        "index": 112,
        "hardness": "medium",
        "pred": "SELECT cars_data.Accelerate FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId WHERE car_names.Make = \" amc hornet sportabout \" AND car_makers.Maker = \" sw \"",
        "gold": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "db_id": "car_1",
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?"
    },
    {
        "index": 115,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM countries WHERE countries.CountryName = \" usa \"",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "db_id": "car_1",
        "question": "How many car models are produced in the usa?"
    },
    {
        "index": 116,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM countries WHERE countries.CountryName = \" usa \"",
        "gold": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "db_id": "car_1",
        "question": "What is the count of the car models produced in the United States?"
    },
    {
        "index": 122,
        "hardness": "medium",
        "pred": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "gold": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "db_id": "car_1",
        "question": "What are the makers and models?"
    },
    {
        "index": 123,
        "hardness": "medium",
        "pred": "SELECT DISTINCT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country",
        "gold": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "db_id": "car_1",
        "question": "What are the countries having at least one car maker? List name and id."
    },
    {
        "index": 128,
        "hardness": "medium",
        "pred": "SELECT Avg(cars_data.Weight), Avg(cars_data.Weight), cars_data.Year FROM cars_data GROUP BY cars_data.Year",
        "gold": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "db_id": "car_1",
        "question": "What is the average weight and year for each year?"
    },
    {
        "index": 129,
        "hardness": "extra",
        "pred": "SELECT countries.CountryName FROM countries JOIN car_makers WHERE continents.Continent = \" europe \" GROUP BY car_makers.Country HAVING Count(*) >= 3",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "db_id": "car_1",
        "question": "Which countries in europe have at least 3 car manufacturers?"
    },
    {
        "index": 130,
        "hardness": "extra",
        "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.Continent = car_makers.Country WHERE continents.Continent = \" European \" GROUP BY countries.CountryName HAVING Count(*) >= 3",
        "gold": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "db_id": "car_1",
        "question": "What are the names of all European countries with at least 3 manufacturers?"
    },
    {
        "index": 131,
        "hardness": "extra",
        "pred": "SELECT Max(cars_data.Horsepower), Max(car_names.Make) FROM cars_data WHERE cars_data.Cylinders = 3",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?"
    },
    {
        "index": 132,
        "hardness": "extra",
        "pred": "SELECT Max(cars_data.Horsepower), Max(cars_data.Horsepower) FROM cars_data WHERE cars_data.Cylinders = 3",
        "gold": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?"
    },
    {
        "index": 133,
        "hardness": "hard",
        "pred": "SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY Sum(cars_data.MPG) Desc LIMIT 1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon."
    },
    {
        "index": 134,
        "hardness": "hard",
        "pred": "SELECT model_list.Model FROM cars_data ORDER BY cars_data.MPG Desc LIMIT 1",
        "gold": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "db_id": "car_1",
        "question": "What is the car model with the highest mpg ?"
    },
    {
        "index": 138,
        "hardness": "medium",
        "pred": "SELECT Avg(cars_data.Edispl) FROM cars_data",
        "gold": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "db_id": "car_1",
        "question": "What is the average edispl for all volvos?"
    },
    {
        "index": 141,
        "hardness": "hard",
        "pred": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model GROUP BY model_list.Model ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "Which model has the most version(make) of cars?"
    },
    {
        "index": 142,
        "hardness": "hard",
        "pred": "SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "What model has the most different versions?"
    },
    {
        "index": 149,
        "hardness": "medium",
        "pred": "SELECT car_makers.Maker, car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) > 3",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "db_id": "car_1",
        "question": "Which makers designed more than 3 car models? List full name and the id."
    },
    {
        "index": 150,
        "hardness": "medium",
        "pred": "SELECT car_makers.Maker, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) > 3",
        "gold": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "db_id": "car_1",
        "question": "What are the names and ids of all makers with more than 3 models?"
    },
    {
        "index": 151,
        "hardness": "extra",
        "pred": "SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = \" General Motors \" OR cars_data.Weight > 3500",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "db_id": "car_1",
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"
    },
    {
        "index": 152,
        "hardness": "extra",
        "pred": "SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.Maker = \" General Motors \" OR car_makers.Maker > 3500",
        "gold": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "db_id": "car_1",
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?"
    },
    {
        "index": 153,
        "hardness": "easy",
        "pred": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 3000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 4000",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1",
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?"
    },
    {
        "index": 154,
        "hardness": "easy",
        "pred": "SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight < 4000 INTERSECT SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight > 3000",
        "gold": "select distinct year from cars_data where weight between 3000 and 4000;",
        "db_id": "car_1",
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"
    },
    {
        "index": 157,
        "hardness": "extra",
        "pred": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = \" volvo \" ORDER BY cars_data.Accelerate Asc LIMIT 1",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "db_id": "car_1",
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?"
    },
    {
        "index": 158,
        "hardness": "extra",
        "pred": "SELECT cars_data.Cylinders FROM cars_data WHERE cars_data.Accelerate = \" volvo \" ORDER BY cars_data.Accelerate Asc LIMIT 1",
        "gold": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "db_id": "car_1",
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?"
    },
    {
        "index": 159,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT Max(cars_data.Accelerate) FROM cars_data)",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "db_id": "car_1",
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?"
    },
    {
        "index": 160,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM cars_data WHERE cars_data.Accelerate > (SELECT Max(cars_data.Accelerate) FROM cars_data)",
        "gold": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
        "db_id": "car_1",
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?"
    },
    {
        "index": 161,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING Count(*) > 2)",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1",
        "question": "How many countries has more than 2 car makers ?"
    },
    {
        "index": 162,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM (SELECT car_makers.Country FROM car_makers GROUP BY car_makers.Country HAVING Count(*) > 2)",
        "gold": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "db_id": "car_1",
        "question": "What is the number of countries with more than 2 car makers ?"
    },
    {
        "index": 165,
        "hardness": "extra",
        "pred": "SELECT cars_data.Horsepower FROM cars_data WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower Desc LIMIT 1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?"
    },
    {
        "index": 166,
        "hardness": "extra",
        "pred": "SELECT model_list.Model FROM cars_data WHERE cars_data.Cylinders = \" 4 \" ORDER BY cars_data.Horsepower Desc LIMIT 1",
        "gold": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "db_id": "car_1",
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?"
    },
    {
        "index": 167,
        "hardness": "extra",
        "pred": "SELECT *, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower < 3 GROUP BY car_names.MakeId",
        "gold": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",
        "db_id": "car_1",
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."
    },
    {
        "index": 168,
        "hardness": "extra",
        "pred": "SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower != (SELECT Min(cars_data.Horsepower) FROM cars_data)",
        "gold": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",
        "db_id": "car_1",
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?"
    },
    {
        "index": 171,
        "hardness": "extra",
        "pred": "SELECT model_list.Model FROM model_list WHERE model_list.Maker < 3500 EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = \" Ford Motor Company \"",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "db_id": "car_1",
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"
    },
    {
        "index": 172,
        "hardness": "extra",
        "pred": "SELECT DISTINCT model_list.Model FROM model_list JOIN model_list WHERE car_makers.FullName < 3500 EXCEPT SELECT model_list.Model FROM car_makers ON car_makers.Id = car_makers.Id JOIN model_list WHERE car_makers.FullName = \" Ford Motor Company \"",
        "gold": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "db_id": "car_1",
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?"
    },
    {
        "index": 173,
        "hardness": "hard",
        "pred": "SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)",
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "db_id": "car_1",
        "question": "What are the name of the countries where there is not a single car maker?"
    },
    {
        "index": 174,
        "hardness": "hard",
        "pred": "SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN (SELECT car_makers.Country FROM car_makers)",
        "gold": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
        "db_id": "car_1",
        "question": "What are the names of the countries with no car makers?"
    },
    {
        "index": 175,
        "hardness": "extra",
        "pred": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) > 2",
        "gold": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",
        "db_id": "car_1",
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker ."
    },
    {
        "index": 176,
        "hardness": "extra",
        "pred": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) >= 2 INTERSECT SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING Count(*) > 3",
        "gold": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",
        "db_id": "car_1",
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?"
    },
    {
        "index": 177,
        "hardness": "extra",
        "pred": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE model_list.Model = \" fiat \" GROUP BY countries.CountryId HAVING Count(*) > 3",
        "gold": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
        "db_id": "car_1",
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"
    },
    {
        "index": 178,
        "hardness": "extra",
        "pred": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING Count(*) > 3 UNION SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = \" fiat \" GROUP BY countries.CountryId HAVING Count(*) > 3",
        "gold": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",
        "db_id": "car_1",
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?"
    },
    {
        "index": 211,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM airports JOIN flights ON flights.DestAirport = airports.AirportCode WHERE airports.City = \" Aberdeen Aberdeen \" AND airports.AirportName = \" Ashley \"",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "db_id": "flight_2",
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"
    },
    {
        "index": 212,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM airports JOIN flights ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \" Aberdeen \" AND airports.AirportName = \" Ashley \"",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "db_id": "flight_2",
        "question": "How many flights fly from Aberdeen to Ashley?"
    },
    {
        "index": 214,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM airlines WHERE airlines.Airline = \" Jetue Airways \"",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "db_id": "flight_2",
        "question": "Give the number of Jetblue Airways flights."
    },
    {
        "index": 215,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE airlines.Airline = \" AS \" AND airlines.Airline = \" United \"",
        "gold": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "db_id": "flight_2",
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?"
    },
    {
        "index": 219,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport WHERE airports.City = \" Aberdeen Aberdeen \" AND airlines.Airline = \" United \"",
        "gold": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "db_id": "flight_2",
        "question": "How many United Airlines flights go to City 'Aberdeen'?"
    },
    {
        "index": 222,
        "hardness": "extra",
        "pred": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY flights.DestAirport ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_2",
        "question": "Which city has the most frequent destination airport?"
    },
    {
        "index": 224,
        "hardness": "extra",
        "pred": "SELECT airports.City FROM airports GROUP BY airports.City ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_2",
        "question": "Which city is the most frequent source airport?"
    },
    {
        "index": 228,
        "hardness": "extra",
        "pred": "SELECT airports.AirportCode FROM flights GROUP BY flights.SourceAirport ORDER BY Count(*) Asc LIMIT 1",
        "gold": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "db_id": "flight_2",
        "question": "Give the code of the airport with the least flights."
    },
    {
        "index": 230,
        "hardness": "extra",
        "pred": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "db_id": "flight_2",
        "question": "What airline serves the most flights?"
    },
    {
        "index": 231,
        "hardness": "extra",
        "pred": "SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline ORDER BY Count(*) Asc LIMIT 1",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "db_id": "flight_2",
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?"
    },
    {
        "index": 232,
        "hardness": "extra",
        "pred": "SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Abbreviation ORDER BY Count(*) Asc LIMIT 1",
        "gold": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "db_id": "flight_2",
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?"
    },
    {
        "index": 241,
        "hardness": "medium",
        "pred": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline HAVING Count(*) >= 10",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "db_id": "flight_2",
        "question": "Find all airlines that have at least 10 flights."
    },
    {
        "index": 242,
        "hardness": "medium",
        "pred": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY flights.Airline HAVING Count(*) >= 10",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "db_id": "flight_2",
        "question": "Which airlines have at least 10 flights?"
    },
    {
        "index": 243,
        "hardness": "medium",
        "pred": "SELECT airlines.Airline FROM flights GROUP BY flights.Airline HAVING Count(*) < 200",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "db_id": "flight_2",
        "question": "Find all airlines that have fewer than 200 flights."
    },
    {
        "index": 244,
        "hardness": "medium",
        "pred": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.FlightNo < 200",
        "gold": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "db_id": "flight_2",
        "question": "Which airlines have less than 200 flights?"
    },
    {
        "index": 255,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM airports WHERE airports.City = \" Aberdeen Aberdeen \" OR airports.City = \" Abilene \"",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "db_id": "flight_2",
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene."
    },
    {
        "index": 256,
        "hardness": "hard",
        "pred": "SELECT Count(*) FROM airports WHERE airports.City = \" Aberdeen Aberdeen \" OR airports.City = \" Ab \"",
        "gold": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "db_id": "flight_2",
        "question": "How many flights land in Aberdeen or Abilene?"
    },
    {
        "index": 257,
        "hardness": "hard",
        "pred": "SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN (SELECT flights.SourceAirport FROM flights)",
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "db_id": "flight_2",
        "question": "Find the name of airports which do not have any flight in and out."
    },
    {
        "index": 258,
        "hardness": "hard",
        "pred": "SELECT airports.AirportName FROM airports EXCEPT SELECT airports.AirportName FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport",
        "gold": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
        "db_id": "flight_2",
        "question": "Which airports do not have departing or arriving flights?"
    },
    {
        "index": 270,
        "hardness": "medium",
        "pred": "SELECT shop.Manager_name, shop.District FROM shop GROUP BY shop.Name ORDER BY Sum(shop.Number_products) Desc LIMIT 1",
        "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "db_id": "employee_hire_evaluation",
        "question": "What are the manager name and district of the shop that sells the largest number of products?"
    },
    {
        "index": 279,
        "hardness": "hard",
        "pred": "SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "db_id": "employee_hire_evaluation",
        "question": "Find the name of the employee who got the highest one time bonus."
    },
    {
        "index": 284,
        "hardness": "extra",
        "pred": "SELECT shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID ORDER BY Count(hiring.Employee_ID) Desc LIMIT 1",
        "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "employee_hire_evaluation",
        "question": "Which shop has the most employees? Give me the shop name."
    },
    {
        "index": 287,
        "hardness": "medium",
        "pred": "SELECT Count(*), hiring.Shop_ID FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "db_id": "employee_hire_evaluation",
        "question": "Find the number of employees hired in each shop; show the shop name as well."
    },
    {
        "index": 288,
        "hardness": "medium",
        "pred": "SELECT Count(*), shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Shop_ID",
        "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "db_id": "employee_hire_evaluation",
        "question": "For each shop, return the number of employees working there and the name of the shop."
    },
    {
        "index": 307,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM Templates WHERE Templates.Template_Type_Code = \" PP \"",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "How many documents are using the template with type code 'PPT'?"
    },
    {
        "index": 308,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM Templates WHERE Templates.Template_Type_Code = \" PP \"",
        "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Count the number of documents that use the PPT template type."
    },
    {
        "index": 335,
        "hardness": "medium",
        "pred": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What the smallest version number and its template type code?"
    },
    {
        "index": 336,
        "hardness": "medium",
        "pred": "SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates ORDER BY Templates.Date_Effective_To Asc LIMIT 1",
        "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the lowest version number, along with its corresponding template type code."
    },
    {
        "index": 341,
        "hardness": "medium",
        "pred": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates GROUP BY Templates.Template_Type_Code",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes and the number of documents using each type."
    },
    {
        "index": 342,
        "hardness": "medium",
        "pred": "SELECT Templates.Template_Type_Code, Count(*) FROM Templates GROUP BY Templates.Template_Type_Code",
        "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the different template type codes, and how many documents use each type?"
    },
    {
        "index": 343,
        "hardness": "extra",
        "pred": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Which template type code is used by most number of documents?"
    },
    {
        "index": 344,
        "hardness": "extra",
        "pred": "SELECT Templates.Template_Type_Code FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the code of the template type that is most commonly used in documents."
    },
    {
        "index": 345,
        "hardness": "hard",
        "pred": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates",
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all template type codes that are not used by any document."
    },
    {
        "index": 346,
        "hardness": "hard",
        "pred": "SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT Templates.Template_Type_Code FROM Templates",
        "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the codes of template types that are not used for any document?"
    },
    {
        "index": 353,
        "hardness": "medium",
        "pred": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code IN (SELECT Documents.Template_ID FROM Documents)",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the distinct template type descriptions for the templates ever used by any document?"
    },
    {
        "index": 354,
        "hardness": "medium",
        "pred": "SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types",
        "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different descriptions for templates that have been used in a document."
    },
    {
        "index": 355,
        "hardness": "medium",
        "pred": "SELECT Templates.Template_ID FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = \" Presentation \"",
        "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "What are the template ids with template type description \"Presentation\"."
    },
    {
        "index": 361,
        "hardness": "medium",
        "pred": "SELECT Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = \" Korea \"",
        "gold": "select other_details from paragraphs where paragraph_text like 'korea'",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show paragraph details for paragraph with text 'Korea ' ."
    },
    {
        "index": 367,
        "hardness": "medium",
        "pred": "SELECT Paragraphs.Document_ID, Count(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id."
    },
    {
        "index": 368,
        "hardness": "medium",
        "pred": "SELECT Paragraphs.Document_ID, Count(*) FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY Count(*) Asc",
        "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."
    },
    {
        "index": 378,
        "hardness": "easy",
        "pred": "SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING Count(*) <= 3",
        "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "db_id": "cre_Doc_Template_Mgt",
        "question": "Give the ids of documents that have between one and two paragraphs."
    },
    {
        "index": 396,
        "hardness": "hard",
        "pred": "SELECT teacher.Hometown FROM teacher WHERE teacher.Hometown = \" commmon \" GROUP BY teacher.Hometown ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "course_teach",
        "question": "What is the most commmon hometowns for teachers?"
    },
    {
        "index": 407,
        "hardness": "medium",
        "pred": "SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING Count(*) >= 2",
        "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "db_id": "course_teach",
        "question": "Show names of teachers that teach at least two courses."
    },
    {
        "index": 412,
        "hardness": "medium",
        "pred": "SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership Asc",
        "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "db_id": "museum_visit",
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."
    },
    {
        "index": 413,
        "hardness": "easy",
        "pred": "SELECT Avg(visitor.Age) FROM visitor WHERE visitor.Level_of_membership != 4",
        "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "db_id": "museum_visit",
        "question": "What is the average age of the visitors whose membership level is not higher than 4?"
    },
    {
        "index": 414,
        "hardness": "medium",
        "pred": "SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age Asc",
        "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "db_id": "museum_visit",
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."
    },
    {
        "index": 415,
        "hardness": "medium",
        "pred": "SELECT museum.Museum_ID, museum.Name FROM museum GROUP BY museum.Museum_ID ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "db_id": "museum_visit",
        "question": "Find the id and name of the museum that has the most staff members?"
    },
    {
        "index": 423,
        "hardness": "hard",
        "pred": "SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visit.visitor_ID ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "db_id": "museum_visit",
        "question": "Find the name and age of the visitor who bought the most tickets at once."
    },
    {
        "index": 425,
        "hardness": "medium",
        "pred": "SELECT Sum(visit.Total_spent) FROM visit WHERE visitor.Level_of_membership = 1",
        "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "db_id": "museum_visit",
        "question": "What is the total ticket expense of the visitors whose membership level is 1?"
    },
    {
        "index": 427,
        "hardness": "extra",
        "pred": "SELECT Count(*) FROM visit WHERE visit.Museum_ID NOT IN (SELECT museum.Museum_ID FROM museum WHERE museum.Open_Year > 2010)",
        "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
        "db_id": "museum_visit",
        "question": "Find the number of visitors who did not visit any museum opened after 2010."
    },
    {
        "index": 440,
        "hardness": "easy",
        "pred": "SELECT matches.loser_rank FROM matches WHERE matches.loser_rank = (SELECT Min(matches.loser_rank) FROM matches)",
        "gold": "SELECT min(loser_rank) FROM matches",
        "db_id": "wta_1",
        "question": "What is the best rank of losers across all matches?"
    },
    {
        "index": 448,
        "hardness": "hard",
        "pred": "SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2013 INTERSECT SELECT matches.winner_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.year = 2016",
        "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016",
        "db_id": "wta_1",
        "question": "What are the names of players who won in both 2013 and 2016?"
    },
    {
        "index": 453,
        "hardness": "medium",
        "pred": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date Desc LIMIT 1",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "db_id": "wta_1",
        "question": "Find the first name and country code of the oldest player."
    },
    {
        "index": 454,
        "hardness": "medium",
        "pred": "SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date Desc LIMIT 1",
        "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "db_id": "wta_1",
        "question": "What is the first name and country code of the oldest player?"
    },
    {
        "index": 459,
        "hardness": "hard",
        "pred": "SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "Find the first name and country code of the player who did the most number of tours."
    },
    {
        "index": 460,
        "hardness": "hard",
        "pred": "SELECT players.first_name, players.country_code FROM players GROUP BY players.country_code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "What is the first name and country code of the player with the most tours?"
    },
    {
        "index": 463,
        "hardness": "hard",
        "pred": "SELECT matches.winner_name, matches.winner_rank_points FROM matches GROUP BY matches.winner_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "Find the name and rank points of the winner who won the most times."
    },
    {
        "index": 464,
        "hardness": "hard",
        "pred": "SELECT matches.winner_name, matches.loser_rank_points FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?"
    },
    {
        "index": 466,
        "hardness": "hard",
        "pred": "SELECT matches.winner_name FROM matches WHERE matches.tourney_name = \" Australian Open \" ORDER BY matches.loser_rank_points Desc LIMIT 1",
        "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?"
    },
    {
        "index": 468,
        "hardness": "medium",
        "pred": "SELECT matches.winner_name, matches.loser_name FROM matches ORDER BY matches.match_num Desc LIMIT 1",
        "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "What are the names of the winner and loser who played in the longest match?"
    },
    {
        "index": 479,
        "hardness": "medium",
        "pred": "SELECT rankings.ranking_date, Count(*) FROM rankings GROUP BY rankings.ranking_date",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "db_id": "wta_1",
        "question": "Find the total number of tours for each ranking date."
    },
    {
        "index": 480,
        "hardness": "medium",
        "pred": "SELECT rankings.ranking_date, Count(*) FROM rankings GROUP BY rankings.ranking_date",
        "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "db_id": "wta_1",
        "question": "How many total tours were there for each ranking date?"
    },
    {
        "index": 483,
        "hardness": "medium",
        "pred": "SELECT matches.winner_name, matches.loser_rank FROM matches ORDER BY matches.winner_age Asc LIMIT 3",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "db_id": "wta_1",
        "question": "Find the name and rank of the 3 youngest winners across all matches."
    },
    {
        "index": 484,
        "hardness": "medium",
        "pred": "SELECT matches.winner_name, matches.loser_rank FROM matches ORDER BY matches.winner_age Asc LIMIT 3",
        "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "db_id": "wta_1",
        "question": "What are the names and ranks of the three youngest winners across all matches?"
    },
    {
        "index": 485,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT matches.winner_id) FROM (SELECT players.hand FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = \" WTA \" INTERSECT SELECT players.hand FROM matches WHERE matches.tourney_name = \" left \")",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "db_id": "wta_1",
        "question": "How many different winners both participated in the WTA Championships and were left handed?"
    },
    {
        "index": 486,
        "hardness": "medium",
        "pred": "SELECT Count(*) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.loser_hand = \" f \" AND matches.tourney_name = \" WTA \"",
        "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "db_id": "wta_1",
        "question": "Find the number of left handed winners who participated in the WTA Championships."
    },
    {
        "index": 488,
        "hardness": "hard",
        "pred": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY matches.winner_rank_points ORDER BY Max(matches.winner_rank_points) Desc LIMIT 1",
        "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "db_id": "wta_1",
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?"
    },
    {
        "index": 493,
        "hardness": "medium",
        "pred": "SELECT battle.name, battle.date, battle.result FROM battle",
        "gold": "SELECT name ,  date FROM battle",
        "db_id": "battle_death",
        "question": "List the name, date and result of each battle."
    },
    {
        "index": 494,
        "hardness": "medium",
        "pred": "SELECT Max(death.caused_by_ship_id), Min(death.killed), death.killed FROM death GROUP BY death.killed",
        "gold": "SELECT max(killed) ,  min(killed) FROM death",
        "db_id": "battle_death",
        "question": "What is maximum and minimum death toll caused each time?"
    },
    {
        "index": 495,
        "hardness": "easy",
        "pred": "SELECT Avg(*), death.id FROM death GROUP BY death.caused_by_ship_id",
        "gold": "SELECT avg(injured) FROM death",
        "db_id": "battle_death",
        "question": "What is the average number of injuries caused each time?"
    },
    {
        "index": 499,
        "hardness": "hard",
        "pred": "SELECT battle.id, battle.name FROM battle JOIN death ON battle.id = death.id GROUP BY battle.id HAVING Sum(death.killed) > 10",
        "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "db_id": "battle_death",
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total."
    },
    {
        "index": 500,
        "hardness": "extra",
        "pred": "SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id ORDER BY Sum(ship.name) Desc LIMIT 1",
        "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "battle_death",
        "question": "What is the ship id and name that caused most total injuries?"
    },
    {
        "index": 505,
        "hardness": "extra",
        "pred": "SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle WHERE ship.lost_in_battle NOT IN (SELECT ship.lost_in_battle FROM ship WHERE ship.location = \" English \")",
        "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
        "db_id": "battle_death",
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'."
    },
    {
        "index": 506,
        "hardness": "medium",
        "pred": "SELECT death.note FROM death WHERE death.killed LIKE \" % East % \"",
        "gold": "SELECT note FROM death WHERE note LIKE '%East%'",
        "db_id": "battle_death",
        "question": "What are the notes of the death events which has substring 'East'?"
    },
    {
        "index": 507,
        "hardness": "medium",
        "pred": "SELECT Addresses.line_1, Addresses.line_2 FROM Addresses WHERE Addresses.line_1 LIKE \" % 2 % \"",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "db_id": "student_transcripts_tracking",
        "question": "what are all the addresses including line 1 and line 2?"
    },
    {
        "index": 508,
        "hardness": "medium",
        "pred": "SELECT Addresses.line_1, Addresses.line_3 FROM Addresses",
        "gold": "SELECT line_1 ,  line_2 FROM addresses",
        "db_id": "student_transcripts_tracking",
        "question": "What is the first and second line for all addresses?"
    },
    {
        "index": 519,
        "hardness": "easy",
        "pred": "SELECT Count(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "db_id": "student_transcripts_tracking",
        "question": "How many different degree names are offered?"
    },
    {
        "index": 520,
        "hardness": "easy",
        "pred": "SELECT Count(DISTINCT Degree_Programs.degree_program_id) FROM Degree_Programs",
        "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "db_id": "student_transcripts_tracking",
        "question": "How many different degrees are offered?"
    },
    {
        "index": 521,
        "hardness": "medium",
        "pred": "SELECT Sum(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = \" y \"",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department offer?"
    },
    {
        "index": 522,
        "hardness": "medium",
        "pred": "SELECT Sum(*) FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id WHERE Departments.department_name = \" y \"",
        "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "db_id": "student_transcripts_tracking",
        "question": "How many degrees does the engineering department have?"
    },
    {
        "index": 526,
        "hardness": "medium",
        "pred": "SELECT Courses.course_name, Sections.course_id FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id GROUP BY Sections.course_id HAVING Count(*) < 2",
        "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "db_id": "student_transcripts_tracking",
        "question": "What are the names and ids of every course with less than 2 sections?"
    },
    {
        "index": 533,
        "hardness": "medium",
        "pred": "SELECT Students.first_name, Students.middle_name, Student_Enrolment.semester_id FROM Student_Enrolment JOIN Students ON Students.student_id = Students.student_id GROUP BY Student_Enrolment.semester_id HAVING Count(*) = 2",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "db_id": "student_transcripts_tracking",
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id."
    },
    {
        "index": 534,
        "hardness": "medium",
        "pred": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id HAVING Count(*) = 2",
        "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?"
    },
    {
        "index": 536,
        "hardness": "hard",
        "pred": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Student_Enrolment.degree_program_id = \" m \"",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?"
    },
    {
        "index": 537,
        "hardness": "extra",
        "pred": "SELECT Student_Enrolment_Courses.course_id FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.course_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "Find the kind of program which most number of students are enrolled in?"
    },
    {
        "index": 538,
        "hardness": "extra",
        "pred": "SELECT Degree_Programs.degree_summary_name FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.course_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "What is the degree summary name that has the most number of students enrolled?"
    },
    {
        "index": 539,
        "hardness": "extra",
        "pred": "SELECT Student_Enrolment_Courses.course_id, Count(*) FROM Student_Enrolment_Courses JOIN Student_Enrolment ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id GROUP BY Student_Enrolment_Courses.course_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary."
    },
    {
        "index": 540,
        "hardness": "extra",
        "pred": "SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id AND Student_Enrolment.degree_program_id = Student_Enrolment.student_enrolment_id JOIN Degree_Programs GROUP BY Student_Enrolment.degree_program_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "What is the program id and the summary of the degree that has the most students enrolled?"
    },
    {
        "index": 541,
        "hardness": "extra",
        "pred": "SELECT Student_Enrolment.student_enrolment_id, Students.middle_name, Count(*), Student_Enrolment.student_id FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id."
    },
    {
        "index": 542,
        "hardness": "extra",
        "pred": "SELECT Students.first_name, Students.middle_name, Count(*) FROM Student_Enrolment JOIN Students ON Student_Enrolment.student_id = Students.student_id GROUP BY Student_Enrolment.student_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?"
    },
    {
        "index": 549,
        "hardness": "extra",
        "pred": "SELECT Students.last_name FROM Students JOIN Student_Enrolment WHERE Addresses.state_province_county = \" North Carolina \" EXCEPT SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "db_id": "student_transcripts_tracking",
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program."
    },
    {
        "index": 550,
        "hardness": "extra",
        "pred": "SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Addresses WHERE Addresses.state_province_county = \" North Carolina \" EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment",
        "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
        "db_id": "student_transcripts_tracking",
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?"
    },
    {
        "index": 557,
        "hardness": "medium",
        "pred": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered Asc LIMIT 1",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name."
    },
    {
        "index": 558,
        "hardness": "medium",
        "pred": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered Asc LIMIT 1",
        "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "What is the first, middle, and last name of the earliest school graduate?"
    },
    {
        "index": 559,
        "hardness": "easy",
        "pred": "SELECT DISTINCT Students.first_name FROM Students WHERE Students.permanent_address_id > 0",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "question": "Whose permanent address is different from his or her current address? List his or her first name."
    },
    {
        "index": 560,
        "hardness": "easy",
        "pred": "SELECT DISTINCT Students.first_name FROM Students WHERE Students.permanent_address_id != (SELECT Students.permanent_address_id FROM Students)",
        "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "db_id": "student_transcripts_tracking",
        "question": "What is the first name of the student whose permanent address is different from his or her current one?"
    },
    {
        "index": 561,
        "hardness": "extra",
        "pred": "SELECT Students.current_address_id, Students.current_address_id FROM Students GROUP BY Students.current_address_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "Which address holds the most number of students currently? List the address id and all lines."
    },
    {
        "index": 570,
        "hardness": "medium",
        "pred": "SELECT Max(Transcripts.transcript_date) FROM Transcripts",
        "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "When was the last transcript released?"
    },
    {
        "index": 571,
        "hardness": "hard",
        "pred": "SELECT Count(*), Transcript_Contents.transcript_id, Student_Enrolment_Courses.student_enrolment_id FROM Student_Enrolment_Courses GROUP BY Transcript_Contents.transcript_id ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id."
    },
    {
        "index": 572,
        "hardness": "hard",
        "pred": "SELECT Count(*), Transcripts.transcript_date FROM Transcripts JOIN Transcripts GROUP BY Transcripts.transcript_id",
        "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "student_transcripts_tracking",
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?"
    },
    {
        "index": 575,
        "hardness": "extra",
        "pred": "SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id AND Student_Enrolment.student_enrolment_id = Student_Enrolment.student_enrolment_id JOIN Student_Enrolment_Courses WHERE Student_Enrolment.student_enrolment_id = \" Master Master \" INTERSECT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id WHERE Student_Enrolment_Courses.student_course_id = \" Bachelor \"",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "question": "Find the semester when both Master students and Bachelor students got enrolled in."
    },
    {
        "index": 576,
        "hardness": "extra",
        "pred": "SELECT Student_Enrolment.semester_id FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id WHERE Student_Enrolment_Courses.course_id = \" y \" INTERSECT SELECT Student_Enrolment.semester_id FROM Student_Enrolment JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id WHERE Student_Enrolment_Courses.course_id = \" y \"",
        "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
        "db_id": "student_transcripts_tracking",
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?"
    },
    {
        "index": 578,
        "hardness": "easy",
        "pred": "SELECT DISTINCT Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id = Students.permanent_address_id",
        "gold": "SELECT count(DISTINCT current_address_id) FROM Students",
        "db_id": "student_transcripts_tracking",
        "question": "What are the different addresses that have students living there?"
    },
    {
        "index": 580,
        "hardness": "easy",
        "pred": "SELECT Student_Enrolment.other_details FROM Students ORDER BY Students.other_student_details Desc",
        "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "db_id": "student_transcripts_tracking",
        "question": "What other details can you tell me about students in reverse alphabetical order?"
    },
    {
        "index": 584,
        "hardness": "hard",
        "pred": "SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = \" Haiti Haiti \" OR Students.cell_mobile_number = \" 09700166582 \" UNION SELECT Students.first_name FROM Students WHERE Students.cell_mobile_number = \" 09700166582 \"",
        "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "db_id": "student_transcripts_tracking",
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?"
    },
    {
        "index": 587,
        "hardness": "easy",
        "pred": "SELECT Cartoon.Directed_by FROM Cartoon WHERE Cartoon.Directed_by = \" Ben Jones \"",
        "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "db_id": "tvshow",
        "question": "List all cartoon directed by \"Ben Jones\"."
    },
    {
        "index": 592,
        "hardness": "medium",
        "pred": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Original_air_date = TV_series.id ORDER BY TV_series.Air_Date Asc",
        "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "db_id": "tvshow",
        "question": "What is the name and directors of all the cartoons that are ordered by air date?"
    },
    {
        "index": 605,
        "hardness": "hard",
        "pred": "SELECT TV_Channel.Language, Count(*) FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY Count(TV_Channel.Language) Asc LIMIT 1",
        "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "db_id": "tvshow",
        "question": "List the language used least number of TV Channel. List language and number of TV Channel."
    },
    {
        "index": 609,
        "hardness": "medium",
        "pred": "SELECT TV_Channel.series_name FROM TV_series JOIN Cartoon ON TV_series.Channel = Cartoon.Channel WHERE Cartoon.Title = \" The Rise of the Blue Beetle ! \"",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "db_id": "tvshow",
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name."
    },
    {
        "index": 610,
        "hardness": "medium",
        "pred": "SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel WHERE Cartoon.Title = \" The Rise of the Blue \"",
        "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "db_id": "tvshow",
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?"
    },
    {
        "index": 630,
        "hardness": "medium",
        "pred": "SELECT Cartoon.Channel, Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Channel Desc LIMIT 1",
        "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "db_id": "tvshow",
        "question": "What is the produdction code and channel of the most recent cartoon ?"
    },
    {
        "index": 631,
        "hardness": "medium",
        "pred": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel",
        "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "db_id": "tvshow",
        "question": "Find the package choice and series name of the TV channel that has high definition TV."
    },
    {
        "index": 638,
        "hardness": "extra",
        "pred": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN TV_series WHERE Cartoon.Directed_by = \" Ben Jones \" INTERSECT SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = \" Michael Chang \"",
        "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
        "db_id": "tvshow",
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?"
    },
    {
        "index": 642,
        "hardness": "easy",
        "pred": "SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING Count(*) > 2",
        "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "db_id": "tvshow",
        "question": "What are the ids of all tv channels that have more than 2 TV channels?"
    },
    {
        "index": 645,
        "hardness": "hard",
        "pred": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = Cartoon.Channel WHERE Cartoon.Directed_by = \" Ben Jones \"",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "db_id": "tvshow",
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones."
    },
    {
        "index": 646,
        "hardness": "hard",
        "pred": "SELECT TV_Channel.Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = \" Ben Jones \"",
        "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
        "db_id": "tvshow",
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?"
    },
    {
        "index": 657,
        "hardness": "easy",
        "pred": "SELECT Max(*) FROM poker_player WHERE poker_player.Earnings < 200000",
        "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "db_id": "poker_player",
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?"
    },
    {
        "index": 684,
        "hardness": "hard",
        "pred": "SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "db_id": "poker_player",
        "question": "What are the names of people who do not play poker?"
    },
    {
        "index": 691,
        "hardness": "easy",
        "pred": "SELECT VOTES.created FROM VOTES WHERE VOTES.state = \" CA \"",
        "gold": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "db_id": "voter_1",
        "question": "What is last date created of votes from the state 'CA'?"
    },
    {
        "index": 695,
        "hardness": "extra",
        "pred": "SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number ORDER BY CONTESTANTS.contestant_number Asc LIMIT 1",
        "gold": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "db_id": "voter_1",
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?"
    },
    {
        "index": 698,
        "hardness": "extra",
        "pred": "SELECT AREA_CODE_STATE.area_code FROM VOTES GROUP BY AREA_CODE_STATE.area_code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "db_id": "voter_1",
        "question": "What is the area code in which the most voters voted?"
    },
    {
        "index": 700,
        "hardness": "extra",
        "pred": "SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = \" Tabatha Gehling \" INTERSECT SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = \" Kellys \"",
        "gold": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
        "db_id": "voter_1",
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'."
    },
    {
        "index": 707,
        "hardness": "easy",
        "pred": "SELECT Sum(country.SurfaceArea) FROM country WHERE country.Name = \" Carribean \"",
        "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "db_id": "world_1",
        "question": "How much surface area do the countires in the Carribean cover together?"
    },
    {
        "index": 709,
        "hardness": "easy",
        "pred": "SELECT country.Continent FROM country WHERE country.LocalName = \" Anguilla \"",
        "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "db_id": "world_1",
        "question": "What is the continent name which Anguilla belongs to?"
    },
    {
        "index": 710,
        "hardness": "medium",
        "pred": "SELECT country.Region FROM city WHERE city.Name = \" Kabul Kabul \"",
        "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "db_id": "world_1",
        "question": "Which region is the city Kabul located in?"
    },
    {
        "index": 712,
        "hardness": "extra",
        "pred": "SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = \" Ar \" GROUP BY countrylanguage.Language ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "db_id": "world_1",
        "question": "Which language is the most popular in Aruba?"
    },
    {
        "index": 713,
        "hardness": "extra",
        "pred": "SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = \" Aruba \"",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "db_id": "world_1",
        "question": "What language is predominantly spoken in Aruba?"
    },
    {
        "index": 722,
        "hardness": "medium",
        "pred": "SELECT Sum(country.GNP), Max(country.GNP) FROM country WHERE country.Continent = \" Asia \"",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "db_id": "world_1",
        "question": "What is the total population and maximum GNP in Asia?"
    },
    {
        "index": 723,
        "hardness": "medium",
        "pred": "SELECT Max(country.GNP), Max(country.GNP) FROM country WHERE country.Continent = \" Asia \"",
        "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "db_id": "world_1",
        "question": "How many people live in Asia, and what is the largest GNP among them?"
    },
    {
        "index": 724,
        "hardness": "medium",
        "pred": "SELECT Avg(country.LifeExpectancy) FROM country WHERE country.GovernmentForm = \" republic \" AND country.Continent = \"",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "db_id": "world_1",
        "question": "What is the average life expectancy in African countries that are republics?"
    },
    {
        "index": 728,
        "hardness": "easy",
        "pred": "SELECT city.Population FROM city WHERE city.District = \" Gelderland \"",
        "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "db_id": "world_1",
        "question": "How many people live in Gelderland district?"
    },
    {
        "index": 736,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT countrylanguage.Language) FROM country WHERE country.Name = \" Ar \"",
        "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "db_id": "world_1",
        "question": "What is the total number of languages used in Aruba?"
    },
    {
        "index": 738,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Name = \" Afghanistan \"",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "How many official languages does Afghanistan have?"
    },
    {
        "index": 739,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Name = \" Afghanistan \"",
        "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "How many official languages are spoken in Afghanistan?"
    },
    {
        "index": 740,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "world_1",
        "question": "What is name of the country that speaks the largest number of languages?"
    },
    {
        "index": 744,
        "hardness": "easy",
        "pred": "SELECT Count(*) FROM (SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English \" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" Dutch \")",
        "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "db_id": "world_1",
        "question": "How many countries speak both English and Dutch?"
    },
    {
        "index": 745,
        "hardness": "easy",
        "pred": "SELECT Count(*) FROM (SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English \" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" Dutch \")",
        "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")",
        "db_id": "world_1",
        "question": "What is the number of nations that use English and Dutch?"
    },
    {
        "index": 748,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English \" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" French \"",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "What are the names of nations where both English and French are official languages?"
    },
    {
        "index": 749,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English English \" INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" French \"",
        "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "Give the names of countries with English and French as official languages."
    },
    {
        "index": 754,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English \" OR countrylanguage.Language = \" Dutch \"",
        "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"",
        "db_id": "world_1",
        "question": "What are the countries where either English or Dutch is the official language ?"
    },
    {
        "index": 755,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English \" OR countrylanguage.Language = \" Dutch \"",
        "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "Which countries have either English or Dutch as an official language?"
    },
    {
        "index": 759,
        "hardness": "hard",
        "pred": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.GovernmentForm = \" republic \" GROUP BY country.Code HAVING Count(*) = 1",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "db_id": "world_1",
        "question": "What languages are only used by a single country with a republic government?"
    },
    {
        "index": 760,
        "hardness": "extra",
        "pred": "SELECT city.Name FROM city WHERE city.Population = \" English \" ORDER BY city.Population Desc LIMIT 1",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "db_id": "world_1",
        "question": "Find the city with the largest population that uses English."
    },
    {
        "index": 761,
        "hardness": "extra",
        "pred": "SELECT city.Name FROM city WHERE city.ID = \" English \" GROUP BY city.Name ORDER BY Count(city.ID) Desc LIMIT 1",
        "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "db_id": "world_1",
        "question": "What is the most populace city that speaks English?"
    },
    {
        "index": 762,
        "hardness": "hard",
        "pred": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.SurfaceArea = \" f \" ORDER BY country.SurfaceArea Desc LIMIT 1",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "db_id": "world_1",
        "question": "Find the name, population and expected life length of asian country with the largest area?"
    },
    {
        "index": 763,
        "hardness": "hard",
        "pred": "SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.SurfaceArea = \" f \"",
        "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "db_id": "world_1",
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?"
    },
    {
        "index": 764,
        "hardness": "extra",
        "pred": "SELECT Avg(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial NOT IN (SELECT countrylanguage.IsOfficial FROM countrylanguage WHERE countrylanguage.Language = \" English \")",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "db_id": "world_1",
        "question": "What is average life expectancy in the countries where English is not the official language?"
    },
    {
        "index": 765,
        "hardness": "extra",
        "pred": "SELECT Avg(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial NOT IN (SELECT countrylanguage.IsOfficial FROM countrylanguage WHERE countrylanguage.Language = \" English \")",
        "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
        "db_id": "world_1",
        "question": "Give the mean life expectancy of countries in which English is not the official language."
    },
    {
        "index": 766,
        "hardness": "extra",
        "pred": "SELECT Sum(city.Population) FROM country WHERE countrylanguage.CountryCode NOT IN (SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.Language = \" English \")",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "db_id": "world_1",
        "question": "What is the total number of people living in the nations that do not use English?"
    },
    {
        "index": 767,
        "hardness": "extra",
        "pred": "SELECT Sum(city.Population) FROM country WHERE country.Code NOT IN (SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \" English \")",
        "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
        "db_id": "world_1",
        "question": "How many people live in countries that do not speak English?"
    },
    {
        "index": 768,
        "hardness": "medium",
        "pred": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \" Beatrix \"",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "What is the official language spoken in the country whose head of state is Beatrix?"
    },
    {
        "index": 769,
        "hardness": "medium",
        "pred": "SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = \" Beatrix \"",
        "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "What is the official language used in the country the name of whose head of state is Beatrix."
    },
    {
        "index": 770,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?"
    },
    {
        "index": 771,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930",
        "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "db_id": "world_1",
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?"
    },
    {
        "index": 772,
        "hardness": "hard",
        "pred": "SELECT country.SurfaceArea FROM country WHERE country.SurfaceArea > (SELECT Max(country.SurfaceArea) FROM country WHERE country.Continent = \" Europe Europe \")",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "db_id": "world_1",
        "question": "What are the countries that have greater surface area than any country in Europe?"
    },
    {
        "index": 773,
        "hardness": "hard",
        "pred": "SELECT country.SurfaceArea FROM country WHERE country.SurfaceArea > (SELECT Max(country.SurfaceArea) FROM country WHERE country.Continent = \" Europe \")",
        "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")",
        "db_id": "world_1",
        "question": "Which countries have greater area than that of any country in Europe?"
    },
    {
        "index": 774,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country WHERE country.Population < (SELECT Max(country.Population) FROM country WHERE country.Continent = \" Asia \")",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")",
        "db_id": "world_1",
        "question": "What are the African countries that have a  population less than any country in Asia?"
    },
    {
        "index": 775,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country WHERE country.Population < (SELECT Min(country.Population) FROM country WHERE country.Continent = \" Asia \")",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")",
        "db_id": "world_1",
        "question": "Which African countries have a smaller population than that of any country in Asia?"
    },
    {
        "index": 776,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country WHERE country.Population > (SELECT Max(country.Population) FROM country WHERE country.Continent = \" Africa Africa \")",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")",
        "db_id": "world_1",
        "question": "Which Asian countries have a population that is larger than any country in Africa?"
    },
    {
        "index": 777,
        "hardness": "extra",
        "pred": "SELECT country.Name FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Population > (SELECT Max(country.Population) FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = \" Africa Africa \")",
        "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")",
        "db_id": "world_1",
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?"
    },
    {
        "index": 778,
        "hardness": "hard",
        "pred": "SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \" English \"",
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "db_id": "world_1",
        "question": "What are the country codes for countries that do not speak English?"
    },
    {
        "index": 779,
        "hardness": "hard",
        "pred": "SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \" English \"",
        "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "db_id": "world_1",
        "question": "Return the country codes for countries that do not speak English."
    },
    {
        "index": 782,
        "hardness": "hard",
        "pred": "SELECT country.Code FROM country WHERE countrylanguage.Language != \" English \" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE country.GovernmentForm != \" Republic \"",
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "db_id": "world_1",
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?"
    },
    {
        "index": 783,
        "hardness": "hard",
        "pred": "SELECT country.Code FROM country WHERE country.GovernmentForm != \" English \" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language != \" Republics \"",
        "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"",
        "db_id": "world_1",
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments."
    },
    {
        "index": 784,
        "hardness": "extra",
        "pred": "SELECT city.Name FROM city WHERE city.Name NOT IN (SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" English \")",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "db_id": "world_1",
        "question": "Which cities are in European countries where English is not the official language?"
    },
    {
        "index": 785,
        "hardness": "extra",
        "pred": "SELECT city.Name FROM city WHERE countrylanguage.CountryCode NOT IN (SELECT country.Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \" Europe Europe \")",
        "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')",
        "db_id": "world_1",
        "question": "What are the names of cities in Europe for which English is not the official language?"
    },
    {
        "index": 786,
        "hardness": "hard",
        "pred": "SELECT DISTINCT city.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = \" Chinese \" AND countrylanguage.IsOfficial = \" Asian \"",
        "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "db_id": "world_1",
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?"
    },
    {
        "index": 787,
        "hardness": "hard",
        "pred": "SELECT DISTINCT city.Name FROM city JOIN countrylanguage WHERE country.Continent = \" Asia \" AND countrylanguage.IsOfficial = \" Chinese \"",
        "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "db_id": "world_1",
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language."
    },
    {
        "index": 792,
        "hardness": "medium",
        "pred": "SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING Count(*) >= 2",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "db_id": "world_1",
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages."
    },
    {
        "index": 793,
        "hardness": "medium",
        "pred": "SELECT country.Name, Count(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING Count(*) > 2",
        "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "db_id": "world_1",
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?"
    },
    {
        "index": 796,
        "hardness": "medium",
        "pred": "SELECT country.GovernmentForm, Avg(country.Population) FROM country GROUP BY country.GovernmentForm HAVING Avg(country.Population) > 72",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "db_id": "world_1",
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72."
    },
    {
        "index": 797,
        "hardness": "medium",
        "pred": "SELECT country.GovernmentForm, Sum(country.Population) FROM country WHERE country.LifeExpectancy > 72 GROUP BY country.GovernmentForm",
        "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "db_id": "world_1",
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?"
    },
    {
        "index": 798,
        "hardness": "medium",
        "pred": "SELECT Avg(country.Population), Max(country.Population), country.LifeExpectancy FROM country WHERE country.LifeExpectancy < 72 GROUP BY country.Continent",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "db_id": "world_1",
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?"
    },
    {
        "index": 799,
        "hardness": "medium",
        "pred": "SELECT country.Continent, Sum(country.Population), country.LifeExpectancy FROM country GROUP BY country.Continent HAVING Avg(country.LifeExpectancy) < 72",
        "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "db_id": "world_1",
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?"
    },
    {
        "index": 810,
        "hardness": "hard",
        "pred": "SELECT Sum(city.Population), Avg(country.SurfaceArea) FROM country WHERE country.Continent = \" North \" AND country.SurfaceArea > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1",
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?"
    },
    {
        "index": 811,
        "hardness": "hard",
        "pred": "SELECT Sum(city.Population), Avg(country.SurfaceArea) FROM country WHERE country.Continent = \" North America \" AND country.SurfaceArea > 3000",
        "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "db_id": "world_1",
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ."
    },
    {
        "index": 816,
        "hardness": "medium",
        "pred": "SELECT countrylanguage.Language, Max(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.Language",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "db_id": "world_1",
        "question": "What is the language spoken by the largest percentage of people in each country?"
    },
    {
        "index": 817,
        "hardness": "medium",
        "pred": "SELECT countrylanguage.Language, Max(countrylanguage.Percentage) FROM countrylanguage GROUP BY countrylanguage.CountryCode",
        "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "db_id": "world_1",
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?"
    },
    {
        "index": 818,
        "hardness": "extra",
        "pred": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = \" Spanish \" GROUP BY countrylanguage.Percentage ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?"
    },
    {
        "index": 819,
        "hardness": "extra",
        "pred": "SELECT Count(*) FROM countrylanguage WHERE countrylanguage.Language = \" Spanish \" GROUP BY countrylanguage.CountryCode ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "question": "Count the number of countries for which Spanish is the predominantly spoken language."
    },
    {
        "index": 820,
        "hardness": "medium",
        "pred": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \" Spanish \" ORDER BY countrylanguage.Percentage Desc LIMIT 1",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?"
    },
    {
        "index": 821,
        "hardness": "medium",
        "pred": "SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = \" Spanish \" GROUP BY countrylanguage.CountryCode ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "db_id": "world_1",
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language."
    },
    {
        "index": 850,
        "hardness": "medium",
        "pred": "SELECT orchestra.Major_Record_Format FROM orchestra ORDER BY orchestra.Major_Record_Format Asc",
        "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "db_id": "orchestra",
        "question": "Please show the record formats of orchestras in ascending order of count."
    },
    {
        "index": 884,
        "hardness": "medium",
        "pred": "SELECT Highschooler.name, Count(*) FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "db_id": "network_1",
        "question": "Show the names of high school students and their corresponding number of friends."
    },
    {
        "index": 885,
        "hardness": "medium",
        "pred": "SELECT Count(*), Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name",
        "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "db_id": "network_1",
        "question": "What are the names of the high schoolers and how many friends does each have?"
    },
    {
        "index": 890,
        "hardness": "hard",
        "pred": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = \" Kyle Kyle \"",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "db_id": "network_1",
        "question": "Show the names of all of the high schooler Kyle's friends."
    },
    {
        "index": 891,
        "hardness": "hard",
        "pred": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = \" Kyle name name \"",
        "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "db_id": "network_1",
        "question": "Return the names of friends of the high school student Kyle."
    },
    {
        "index": 896,
        "hardness": "hard",
        "pred": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "db_id": "network_1",
        "question": "Show names of all high school students who do not have any friends."
    },
    {
        "index": 897,
        "hardness": "hard",
        "pred": "SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
        "db_id": "network_1",
        "question": "What are the names of students who have no friends?"
    },
    {
        "index": 898,
        "hardness": "hard",
        "pred": "SELECT Friend.student_id FROM Friend INTERSECT SELECT Likes.student_id FROM Likes",
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "db_id": "network_1",
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else."
    },
    {
        "index": 899,
        "hardness": "hard",
        "pred": "SELECT Likes.student_id FROM Friend INTERSECT SELECT Likes.student_id FROM Likes",
        "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "db_id": "network_1",
        "question": "What are the ids of students who both have friends and are liked?"
    },
    {
        "index": 904,
        "hardness": "medium",
        "pred": "SELECT Highschooler.name, Count(*) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "db_id": "network_1",
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each."
    },
    {
        "index": 905,
        "hardness": "medium",
        "pred": "SELECT Count(*), Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name",
        "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "db_id": "network_1",
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?"
    },
    {
        "index": 910,
        "hardness": "hard",
        "pred": "SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade >= 2",
        "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "db_id": "network_1",
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends."
    },
    {
        "index": 914,
        "hardness": "hard",
        "pred": "SELECT Avg(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "db_id": "network_1",
        "question": "Find the average grade of all students who have some friends."
    },
    {
        "index": 915,
        "hardness": "hard",
        "pred": "SELECT Avg(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID IN (SELECT Friend.student_id FROM Friend)",
        "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "db_id": "network_1",
        "question": "What is the average grade of students who have friends?"
    },
    {
        "index": 916,
        "hardness": "extra",
        "pred": "SELECT Min(Highschooler.grade) FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "db_id": "network_1",
        "question": "Find the minimum grade of students who have no friends."
    },
    {
        "index": 917,
        "hardness": "extra",
        "pred": "SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.ID NOT IN (SELECT Friend.student_id FROM Friend)",
        "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
        "db_id": "network_1",
        "question": "What is the lowest grade of students who do not have any friends?"
    },
    {
        "index": 921,
        "hardness": "hard",
        "pred": "SELECT Avg(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id",
        "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "db_id": "dog_kennels",
        "question": "Find the average age of the dogs who went through treatments."
    },
    {
        "index": 922,
        "hardness": "extra",
        "pred": "SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.state = \" Indiana \" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id HAVING Count(*) > 2",
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "db_id": "dog_kennels",
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone."
    },
    {
        "index": 923,
        "hardness": "extra",
        "pred": "SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = \" Indiana \" UNION SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING Count(*) > 2",
        "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
        "db_id": "dog_kennels",
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments."
    },
    {
        "index": 924,
        "hardness": "hard",
        "pred": "SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment > 1000",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels",
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names ."
    },
    {
        "index": 925,
        "hardness": "hard",
        "pred": "SELECT Dogs.name FROM Dogs EXCEPT SELECT Dogs.name FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Treatments.cost_of_treatment > 1000",
        "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )",
        "db_id": "dog_kennels",
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?"
    },
    {
        "index": 926,
        "hardness": "hard",
        "pred": "SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code = \" EXCEPT SELECT Owners.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id",
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "db_id": "dog_kennels",
        "question": "Which first names are used for professionals or owners but are not used as dog names?"
    },
    {
        "index": 927,
        "hardness": "hard",
        "pred": "SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code = \" EXCEPT SELECT Professionals.first_name FROM Professionals JOIN Dogs ON Professionals.professional_id = Dogs.owner_id",
        "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "db_id": "dog_kennels",
        "question": "Find the first names that are used for professionals or owners but are not used as dog names."
    },
    {
        "index": 928,
        "hardness": "extra",
        "pred": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals EXCEPT SELECT Treatments.professional_id, Professionals.role_code, Professionals.email_address FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id",
        "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
        "db_id": "dog_kennels",
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email."
    },
    {
        "index": 934,
        "hardness": "extra",
        "pred": "SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "dog_kennels",
        "question": "What is the name of the breed with the most dogs?"
    },
    {
        "index": 935,
        "hardness": "extra",
        "pred": "SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Dogs.breed_code ORDER BY Count(*) Desc LIMIT 1",
        "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "db_id": "dog_kennels",
        "question": "Which breed do the most dogs have? Give me the breed name."
    },
    {
        "index": 937,
        "hardness": "extra",
        "pred": "SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY Sum(Treatments.cost_of_treatment) Desc LIMIT 1",
        "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "db_id": "dog_kennels",
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs."
    },
    {
        "index": 940,
        "hardness": "extra",
        "pred": "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Sum(Charges.charge_amount) Desc LIMIT 1",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "db_id": "dog_kennels",
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code."
    },
    {
        "index": 941,
        "hardness": "extra",
        "pred": "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY Sum(Owners.owner_id) Desc LIMIT 1",
        "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "db_id": "dog_kennels",
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs."
    },
    {
        "index": 945,
        "hardness": "extra",
        "pred": "SELECT Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT Avg(Treatments.cost_of_treatment) FROM Treatments WHERE Treatments.cost_of_treatment = \" m \")",
        "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
        "db_id": "dog_kennels",
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names."
    },
    {
        "index": 947,
        "hardness": "medium",
        "pred": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.role_code = \" y \"",
        "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "db_id": "dog_kennels",
        "question": "What are the date and the operating professional's first name of each treatment?"
    },
    {
        "index": 950,
        "hardness": "medium",
        "pred": "SELECT Owners.first_name, Owners.last_name, Max(Dogs.size_code) FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id",
        "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "db_id": "dog_kennels",
        "question": "List each owner's first name, last name, and the size of his for her dog."
    },
    {
        "index": 954,
        "hardness": "extra",
        "pred": "SELECT Dogs.name, Treatments.date_of_treatment FROM Breeds JOIN Treatments ORDER BY Breeds.breed_name Asc LIMIT 1",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "db_id": "dog_kennels",
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them."
    },
    {
        "index": 955,
        "hardness": "extra",
        "pred": "SELECT Dogs.name, Treatments.date_of_treatment FROM Breeds JOIN Treatments ORDER BY Breeds.breed_name Asc LIMIT 1",
        "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "db_id": "dog_kennels",
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates."
    },
    {
        "index": 960,
        "hardness": "extra",
        "pred": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth Asc LIMIT 1",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "db_id": "dog_kennels",
        "question": "List the last name of the owner owning the youngest dog."
    },
    {
        "index": 961,
        "hardness": "extra",
        "pred": "SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.age Asc LIMIT 1",
        "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
        "db_id": "dog_kennels",
        "question": "Who owns the youngest dog? Give me his or her last name."
    },
    {
        "index": 970,
        "hardness": "medium",
        "pred": "SELECT Professionals.role_code, Professionals.street, Professionals.state, Professionals.state FROM Professionals WHERE Professionals.city LIKE \" % West % \"",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "db_id": "dog_kennels",
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state."
    },
    {
        "index": 971,
        "hardness": "medium",
        "pred": "SELECT Professionals.role_code, Professionals.street, Professionals.state FROM Professionals WHERE Professionals.city NOT LIKE \" % West % \"",
        "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "db_id": "dog_kennels",
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'."
    },
    {
        "index": 984,
        "hardness": "medium",
        "pred": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 UNION SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 0 AND Dogs.weight = 0",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "db_id": "dog_kennels",
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no."
    },
    {
        "index": 985,
        "hardness": "medium",
        "pred": "SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1 AND Dogs.date_departed = 0",
        "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "db_id": "dog_kennels",
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables."
    },
    {
        "index": 988,
        "hardness": "easy",
        "pred": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age Desc LIMIT 1",
        "gold": "SELECT max(age) FROM Dogs",
        "db_id": "dog_kennels",
        "question": "What is the age of the oldest dog?"
    },
    {
        "index": 989,
        "hardness": "easy",
        "pred": "SELECT Dogs.age FROM Dogs ORDER BY Dogs.age Desc LIMIT 1",
        "gold": "SELECT max(age) FROM Dogs",
        "db_id": "dog_kennels",
        "question": "Tell me the age of the oldest dog."
    },
    {
        "index": 990,
        "hardness": "medium",
        "pred": "SELECT Charges.charge_type, Sum(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "db_id": "dog_kennels",
        "question": "How much does each charge type costs? List both charge type and amount."
    },
    {
        "index": 991,
        "hardness": "medium",
        "pred": "SELECT Charges.charge_type, Sum(Charges.charge_amount) FROM Charges GROUP BY Charges.charge_type",
        "gold": "SELECT charge_type ,  charge_amount FROM Charges",
        "db_id": "dog_kennels",
        "question": "List each charge type and its amount."
    },
    {
        "index": 992,
        "hardness": "easy",
        "pred": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type Desc LIMIT 1",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "db_id": "dog_kennels",
        "question": "How much does the most expensive charge type costs?"
    },
    {
        "index": 993,
        "hardness": "easy",
        "pred": "SELECT Charges.charge_amount FROM Charges ORDER BY Charges.charge_type Desc LIMIT 1",
        "gold": "SELECT max(charge_amount) FROM Charges",
        "db_id": "dog_kennels",
        "question": "What is the charge amount of the most expensive charge type?"
    },
    {
        "index": 996,
        "hardness": "medium",
        "pred": "SELECT Count(DISTINCT Dogs.breed_code), Dogs.size_code FROM Dogs",
        "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "db_id": "dog_kennels",
        "question": "What are all the possible breed type and size type combinations?"
    },
    {
        "index": 1022,
        "hardness": "medium",
        "pred": "SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING Count(*) > 1",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "db_id": "singer",
        "question": "Show the names of singers that have more than one song."
    },
    {
        "index": 1023,
        "hardness": "medium",
        "pred": "SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY song.Singer_ID HAVING Count(*) > 1",
        "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "db_id": "singer",
        "question": "What are the names of the singers that have more than one songs?"
    },
    {
        "index": 1027,
        "hardness": "hard",
        "pred": "SELECT singer.Singer_ID FROM singer WHERE singer.Singer_ID NOT IN (SELECT song.Singer_ID FROM song)",
        "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "db_id": "singer",
        "question": "What is the sname of every sing that does not have any song?"
    },
    {
        "index": 1032,
        "hardness": "medium",
        "pred": "SELECT Ref_Property_Types.property_type_description FROM Ref_Property_Types",
        "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "db_id": "real_estate_properties",
        "question": "Show the property type descriptions of properties belonging to that code."
    },
    {
        "index": 1033,
        "hardness": "hard",
        "pred": "SELECT Properties.property_name FROM Properties WHERE Properties.room_count > 1 OR Properties.property_type_code = \" house \"",
        "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
        "db_id": "real_estate_properties",
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?"
    }
]